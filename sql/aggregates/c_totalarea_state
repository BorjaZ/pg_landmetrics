create or replace function lm.c_totalarea_state(current_state lm.metric2[], geom geometry, category text)
returns lm.metric2[]
volatile
language plpgsql
as $$
declare

  i integer := 0;
  updated_state lm.metric2[] DEFAULT '{"(\"\",\"(\"\"Total Class Area\"\",0,Ha.)\")"}';
  m2 lm.metric2;

begin

  FOREACH m2 IN ARRAY current_state
  LOOP
    
    i:=i+1;
    
    -- RAISE NOTICE '%. Current label: % ; Category: %', i, (m2).label, category;
    
    IF  (category::text != (m2).label::text) OR ((m2).label::text) IS NULL THEN
		RAISE NOTICE '%', '=============== Append ==================';
        RAISE NOTICE '%. Current label: % ; Current category: %', i, (m2).label, category;
 		updated_state := array_append(updated_state, (category,('Total Class Area'::text, (lm.p_area(geom)).value, 'Ha.'::text))::lm.metric2);        
    ELSE
		RAISE NOTICE '%', '=============== Update ==================';
        RAISE NOTICE '%. Current label: % ; Current category: %', i, (m2).label, category;
        updated_state[i] := ((m2).label,('Total Class Area'::text, ((m2).metric).value + (lm.p_area(geom)).value, 'Ha.'::text))::lm.metric2;
    END IF;
    
    
  END LOOP;


  return updated_state;
end;
$$;

DROP AGGREGATE lm.c_totalarea_agg(geometry, text);
CREATE AGGREGATE lm.c_totalarea_agg(geometry, text)(
    SFUNC=lm.c_totalarea_state,
    STYPE=lm.metric2[],
    INITCOND='{}'
);

SELECT lm.c_totalarea_agg(geom,category) FROM lm.sample_patches;

SELECT SUM((lm.p_area(geom)).value)  FROM lm.sample_patches WHERE category='Agricultural area' GROUP BY category;

-- SELECT lm.c_totalarea_state(ARRAY[('Agricultural area',('Total Class Area'::text, 10, 'Ha.'::text))::lm.metric2], geom, category) FROM lm.sample_patches;



CREATE OR REPLACE FUNCTION lm.c_totalarea_state(
	current_state lm.metric2[],
	geom geometry,
	category text)
    RETURNS "lm.metric2[]"
    LANGUAGE 'sql'

AS $BODY$

WITH inputs AS (
    SELECT current_state AS cstate
), melt AS (
    SELECT unnest(cstate) AS m2 FROM inputs
    UNION 
    SELECT (category,('Total Class Area'::text, (lm.p_area(geom)).value, 'Ha.'::text))::lm.metric2 AS m2
), summarize AS (
    SELECT (m2).label, ((m2).metric).name, SUM(((m2).metric).value) AS value, ((m2).metric).units  FROM melt GROUP BY (m2).label, ((m2).metric).name, ((m2).metric).units
)
SELECT ARRAY(SELECT (label::text, (name, value, units))::lm.metric2 FROM summarize);

$BODY$;